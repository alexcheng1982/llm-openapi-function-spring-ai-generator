{{>licenseInfo}}

package {{package}};

{{#imports}}
import {{import}};
{{/imports}}

import {{package}}.{{classname}};

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import {{invokerPackage}}.ApiException;

import java.util.function.Function;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Description;

{{>generatedAnnotation}}
@Configuration
{{#operations}}
public class {{classname}}SpringAiFunctionConfiguration {
  {{#operation}}
  public record Request_{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) {}

  {{#returnType}}
  public record Response_{{operationId}}({{{returnType}}} value) {}
  {{/returnType}}
  {{^returnType}}
  public class Response_{{operationId}} {}
  {{/returnType}}

  @Bean
  @Description("{{summary}}")
  public Function<Request_{{operationId}}, Response_{{operationId}}> {{operationId}}({{classname}} apiInvoker) {
    return (request) -> {
      try {
        {{#returnType}}
        return new Response_{{operationId}}(apiInvoker.{{operationId}}({{#allParams}}request.{{paramName}}(){{^-last}}, {{/-last}}{{/allParams}}));
        {{/returnType}}
        {{^returnType}}
        apiInvoker.{{operationId}}({{#allParams}}request.{{paramName}}(){{^-last}}, {{/-last}}{{/allParams}});
        return new Response_{{operationId}}();
        {{/returnType}}
      } catch (ApiException e) {
        throw new RuntimeException(e);
      }
    };
  }
  {{/operation}}
}
{{/operations}}
